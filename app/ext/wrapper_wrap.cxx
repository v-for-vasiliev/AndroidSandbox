/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#include <android/log.h>


#include <jni.h>
#include <stdlib.h>
#include <cstring>
#include <vector>
#include <stdio.h>

#include <FsdkRoutine.h>

#ifdef __cplusplus
extern "C" {
#endif

std::vector<uint8_t> descriptor;
std::vector<unsigned char> buf;
std::vector<float> landmarksX;
std::vector<float> landmarksY;

std::vector<float> EyelidLandmarksLeftX;
std::vector<float> EyelidLandmarksLeftY;
std::vector<float> EyelidLandmarksRightX;
std::vector<float> EyelidLandmarksRightY;


fsdk::Landmarks68 landmarks68;
fsdk::EyesEstimation::EyeAttributes::EyelidLandmarks eyelidLandmarksLeft;
fsdk::EyesEstimation::EyeAttributes::EyelidLandmarks eyelidLandmarksRight;


float detection[4];
float headPoseEstimattion[3];
float attrEstimattion[3];
float quality;
int eyesStates[2];
float eyesGaze[4];
float emotionsEstimation[7];
float smile[3];
float ethicity[4];


bool haveDetection = false;

JNIEXPORT jboolean JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_isFrontendEdition(
        JNIEnv *jenv,
        jclass jcls)
{
    return isFrontendEdition();
}

JNIEXPORT void JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_submitImage(
        JNIEnv *jenv,
        jclass jcls,
        jbyteArray data,
        jint width,
        jint height) {

    buf.resize(jenv->GetArrayLength(data));
    jenv->GetByteArrayRegion(data, 0, buf.size(), reinterpret_cast<jbyte*>(buf.data()));

    submitImage(buf.data(), width, height);
}

JNIEXPORT jboolean JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_initFaceEngine(JNIEnv *jenv,
                                                                                                         jclass jcls,
                                                                                                         jstring path)
{
    const char *nativeString = jenv->GetStringUTFChars(path, 0);
    bool result = initFaceEngine(nativeString);
    jenv->ReleaseStringUTFChars(path, nativeString);

    return result;
}

JNIEXPORT jboolean JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_haveFaceDetection(
        JNIEnv *jenv,
        jclass jcls)
{
    return haveDetection;
}

JNIEXPORT jfloatArray JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_getFaceDetection(
        JNIEnv *jenv,
        jclass jcls)
{
    jfloatArray result;
    result = jenv->NewFloatArray(4);

    if (result == NULL) {
        return NULL; /* out of memory error thrown */
    }

    // move from the temp structure to the java structure
    jenv->SetFloatArrayRegion(result, 0, 4, reinterpret_cast<float*>(detection));

    return result;
}

JNIEXPORT jfloatArray JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_getFaceAttrEstimationAndHeadPose(
        JNIEnv *jenv,
        jclass jcls)
{
    jfloatArray result;
    result = jenv->NewFloatArray(6);

    if (result == NULL) {
        return NULL; /* out of memory error thrown */
    }

    // move from the temp structure to the java structure
    jenv->SetFloatArrayRegion(result, 0, 3, reinterpret_cast<float*>(attrEstimattion));
    jenv->SetFloatArrayRegion(result, 3, 3, reinterpret_cast<float*>(headPoseEstimattion));

    return result;
}

JNIEXPORT jintArray JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_getEyesStates(
        JNIEnv *jenv,
        jclass jcls)
{
    jintArray result;
    result = jenv->NewIntArray(2);

    if (result == NULL) {
        return NULL; /* out of memory error thrown */
    }

    // move from the temp structure to the java structure
    jenv->SetIntArrayRegion(result, 0, 2, reinterpret_cast<int*>(eyesStates));

    return result;
}

JNIEXPORT jfloat JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_getFaceQualityEstimation(
        JNIEnv *jenv,
        jclass jcls)
{
    return quality;
}

JNIEXPORT jint JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_calcFaceDetectionAndEstimation(
        JNIEnv *jenv,
        jclass jcls)
{
    for (auto& pt : landmarks68.landmarks) {
        pt.x = 0;
        pt.y = 0;
    }

    for(int i = 0; i < eyelidLandmarksLeft.landmarkCount; ++i){
        eyelidLandmarksLeft.landmarks[i].x  = 0;
        eyelidLandmarksLeft.landmarks[i].y  = 0;
        eyelidLandmarksRight.landmarks[i].x = 0;
        eyelidLandmarksRight.landmarks[i].y = 0;
    }

    jint result = calcDetectionAndAttrs(detection,
                                        landmarks68,
                                        eyelidLandmarksLeft,
                                        eyelidLandmarksRight,
                                        ethicity,
                                        headPoseEstimattion,
                                        attrEstimattion,
                                        quality,
                                        smile,
                                        emotionsEstimation,
                                        eyesStates,
                                        eyesGaze);

    landmarksX.resize(landmarks68.landmarkCount);
    landmarksY.resize(landmarks68.landmarkCount);
    EyelidLandmarksLeftX.resize(eyelidLandmarksLeft.landmarkCount);
    EyelidLandmarksLeftY.resize(eyelidLandmarksLeft.landmarkCount);
    EyelidLandmarksRightX.resize(eyelidLandmarksRight.landmarkCount);
    EyelidLandmarksRightY.resize(eyelidLandmarksRight.landmarkCount);

    size_t i = 0;

    for (auto& pt : landmarks68.landmarks) {
        landmarksX[i] = pt.x;
        landmarksY[i] = pt.y;
        ++i;
    }


    for(int i = 0; i < eyelidLandmarksLeft.landmarkCount; ++i){
        EyelidLandmarksLeftX[i]  = eyelidLandmarksLeft.landmarks[i].x;
        EyelidLandmarksLeftY[i]  = eyelidLandmarksLeft.landmarks[i].y;
        EyelidLandmarksRightX[i] = eyelidLandmarksRight.landmarks[i].x;
        EyelidLandmarksRightY[i] = eyelidLandmarksRight.landmarks[i].y;
    }

   return result;
}

JNIEXPORT void JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_calcFaceDescriptor(
        JNIEnv *jenv,
        jclass jcls)
{
    descriptor = getFaceDescriptorByteArray();
}

// 1.a get descriptor array
JNIEXPORT jbyteArray JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_getFaceDescriptorByteArray(
        JNIEnv *jenv,
        jclass jcls)
{
    jbyteArray result;
    result = jenv->NewByteArray(descriptor.size());

    if (result == NULL) {
        return NULL; /* out of memory error thrown */
    }

    // move from the temp structure to the java structure
    jenv->SetByteArrayRegion(result, 0, descriptor.size(), reinterpret_cast<signed char*>(descriptor.data()));

    return result;
}

JNIEXPORT jfloatArray JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_getFaceLandmarksX(
        JNIEnv *jenv,
        jclass jcls)
{
    jfloatArray result;
    result = jenv->NewFloatArray(landmarksX.size());

    if (result == NULL) {
        return NULL; /* out of memory error thrown */
    }

    // move from the temp structure to the java structure
    jenv->SetFloatArrayRegion(result, 0, landmarksX.size(), landmarksX.data());

    return result;
}

JNIEXPORT jfloatArray JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_getFaceLandmarksY(
        JNIEnv *jenv,
        jclass jcls)
{
    jfloatArray result;
    result = jenv->NewFloatArray(landmarksY.size());

    if (result == NULL) {
        return NULL; /* out of memory error thrown */
    }

    // move from the temp structure to the java structure
    jenv->SetFloatArrayRegion(result, 0, landmarksY.size(), landmarksY.data());

    return result;
}


JNIEXPORT jfloatArray JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_getLeft_1EyeLidLandmarksX(
        JNIEnv *jenv,
        jclass jcls)
{
    jfloatArray result;
    result = jenv->NewFloatArray(EyelidLandmarksLeftX.size());

    if (result == NULL) {
        return NULL; /* out of memory error thrown */
    }

    // move from the temp structure to the java structure
    jenv->SetFloatArrayRegion(result, 0, EyelidLandmarksLeftX.size(), EyelidLandmarksLeftX.data());

    return result;
}

JNIEXPORT jfloatArray JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_getLeft_1EyeLidLandmarksY(
        JNIEnv *jenv,
        jclass jcls)
{
    jfloatArray result;
    result = jenv->NewFloatArray(EyelidLandmarksLeftY.size());

    if (result == NULL) {
        return NULL; /* out of memory error thrown */
    }

    // move from the temp structure to the java structure
    jenv->SetFloatArrayRegion(result, 0, EyelidLandmarksLeftY.size(), EyelidLandmarksLeftY.data());

    return result;
}

JNIEXPORT jfloatArray JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_getRight_1EyeLidLandmarksX(
        JNIEnv *jenv,
        jclass jcls)
{
    jfloatArray result;
    result = jenv->NewFloatArray(EyelidLandmarksRightX.size());

    if (result == NULL) {
        return NULL; /* out of memory error thrown */
    }

    // move from the temp structure to the java structure
    jenv->SetFloatArrayRegion(result, 0, EyelidLandmarksRightX.size(), EyelidLandmarksRightX.data());

    return result;
}

JNIEXPORT jfloatArray JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_getRight_1EyeLidLandmarksY(
        JNIEnv *jenv,
        jclass jcls)
{
    jfloatArray result;
    result = jenv->NewFloatArray(EyelidLandmarksRightY.size());

    if (result == NULL) {
        return NULL; /* out of memory error thrown */
    }

    // move from the temp structure to the java structure
    jenv->SetFloatArrayRegion(result, 0, EyelidLandmarksRightY.size(), EyelidLandmarksRightY.data());

    return result;
}


JNIEXPORT jfloat JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_matchDescriptors(
        JNIEnv *jenv,
        jclass jcls,
        jbyteArray descriptorArray1,
        jbyteArray descriptorArray2) {

    jbyte* descriptorBufferPtr1 = jenv->GetByteArrayElements(descriptorArray1, NULL);
    jsize lengthOfArray1 = jenv->GetArrayLength(descriptorArray1);

    jbyte* descriptorBufferPtr2 = jenv->GetByteArrayElements(descriptorArray2, NULL);
    jsize lengthOfArray2 = jenv->GetArrayLength(descriptorArray2);

    // copy to std vector
    std::vector<uint8_t> descriptorData1, descriptorData2;

    descriptorData1.assign(descriptorBufferPtr1, descriptorBufferPtr1 + lengthOfArray1);
    descriptorData2.assign(descriptorBufferPtr2, descriptorBufferPtr2 + lengthOfArray2);

    jenv->ReleaseByteArrayElements(descriptorArray1, descriptorBufferPtr1, 0);
    jenv->ReleaseByteArrayElements(descriptorArray2, descriptorBufferPtr2, 0);

    double similarity = matchDescriptorsArrays(descriptorData1, descriptorData2);

    __android_log_print(ANDROID_LOG_INFO, "FaceAlignment",
                        "Java_ru_visionlab_faceenginemobile_bindings_WrapperJNI_PhotoMaker_1   matchDescriptors: %f \n", similarity);

    return similarity;
}

JNIEXPORT jfloatArray JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_getSmileEstimation(
        JNIEnv *jenv,
        jclass jcls)
{
    jfloatArray result;
    result = jenv->NewFloatArray(3);

    if (result == NULL) {
        return NULL; /* out of memory error thrown */
    }

    // move from the temp structure to the java structure
    jenv->SetFloatArrayRegion(result, 0, 3, reinterpret_cast<float*>(smile));
    return result;
}

JNIEXPORT jfloatArray JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_getGazeEstimation(
        JNIEnv *jenv,
        jclass jcls)
{
    jfloatArray result;
    result = jenv->NewFloatArray(4);

    if (result == NULL) {
        return NULL; /* out of memory error thrown */
    }

    // move from the temp structure to the java structure
    jenv->SetFloatArrayRegion(result, 0, 4, reinterpret_cast<float*>(eyesGaze));

    return result;
}

JNIEXPORT jfloatArray JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_getEmotionsEstimation(
        JNIEnv *jenv,
        jclass jcls)
{
    jfloatArray result;
    result = jenv->NewFloatArray(7);

    if (result == NULL) {
        return NULL; /* out of memory error thrown */
    }

    // move from the temp structure to the java structure
    jenv->SetFloatArrayRegion(result, 0, 7, reinterpret_cast<float*>(emotionsEstimation));

    return result;
}

JNIEXPORT jfloatArray JNICALL Java_ru_visionlab_femdemo_faceenginemobile_bindings_WrapperJNI_getEthnicityEstimation(
        JNIEnv *jenv,
        jclass jcls)
{
    jfloatArray result;
    result = jenv->NewFloatArray(4);

    if (result == NULL) {
        return NULL; /* out of memory error thrown */
    }

    // move from the temp structure to the java structure
    jenv->SetFloatArrayRegion(result, 0, 4, reinterpret_cast<float*>(ethicity));

    return result;
}

#ifdef __cplusplus
}
#endif

