/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ru.visionlab.faceengine;

public final class PhotoMaker {

    private transient boolean swigCMemOwn;

    private transient long swigCPtr;

    private PhotoMaker(long cPtr, boolean cMemoryOwn) {
        swigCMemOwn = cMemoryOwn;
        swigCPtr = cPtr;
    }

    public PhotoMaker(String path) {
        this(FaceEngineJNI.new_PhotoMaker(path), true);
    }

    public static long getCPtr(PhotoMaker obj) {
        return (obj == null) ? 0 : obj.swigCPtr;
    }

    @Override
    protected void finalize() throws Throwable {
        delete();
        super.finalize();
    }

    private synchronized void delete() {
        if (swigCPtr != 0) {
            if (swigCMemOwn) {
                swigCMemOwn = false;
                FaceEngineJNI.delete_PhotoMaker(swigCPtr);
            }
            swigCPtr = 0;
        }
    }

    public boolean isLoaded() {
        return FaceEngineJNI.PhotoMaker_isLoaded(swigCPtr, this);
    }

    public boolean load(String path) {
        return FaceEngineJNI.PhotoMaker_load(swigCPtr, this, path);
    }

    public void reset() {
        FaceEngineJNI.PhotoMaker_reset(swigCPtr, this);
    }

    public boolean haveFaceDetection() {
        return FaceEngineJNI.PhotoMaker_haveFaceDetection(swigCPtr, this);
    }

    public Rect getFaceDetection() {
        return new Rect(FaceEngineJNI.PhotoMaker_getFaceDetection(swigCPtr, this), true);
    }

    public boolean[] getQualityStates() {
        return FaceEngineJNI.PhotoMaker_getQualityStates(swigCPtr, this);
    }

    public void update() {
        FaceEngineJNI.PhotoMaker_update(swigCPtr, this);
    }

    public void submit(ImageView frame) {
        FaceEngineJNI.PhotoMaker_submit(swigCPtr, this, ImageView.getCPtr(frame), frame);
    }

    public ImageView getBestShot() {
        return new ImageView(FaceEngineJNI.PhotoMaker_getBestShot(swigCPtr, this), true);
    }

    public ImageView getBestWarpedShot() {
        return new ImageView(FaceEngineJNI.PhotoMaker_getBestWarpedShot(swigCPtr, this), true);
    }

    public boolean haveBestShot() {
        return FaceEngineJNI.PhotoMaker_haveBestShot(swigCPtr, this);
    }

    public ImageView getBestFrame() {
        return new ImageView(FaceEngineJNI.PhotoMaker_getBestFrame(swigCPtr, this), true);
    }

    public void setSaveBestFrameEnabled(boolean value) {
        FaceEngineJNI.PhotoMaker_setSaveBestFrameEnabled(swigCPtr, this, value);
    }

    public int getCurrentFrameNumber() {
        return FaceEngineJNI.PhotoMaker_getCurrentFrameNumber(swigCPtr, this);
    }

    public int getBestShotFrameNumber() {
        return FaceEngineJNI.PhotoMaker_getBestShotFrameNumber(swigCPtr, this);
    }

    public int getLastFrameWithDetectionNumber() {
        return FaceEngineJNI.PhotoMaker_getLastFrameWithDetectionNumber(swigCPtr, this);
    }

    public float getFrameScaleFactor() {
        return FaceEngineJNI.PhotoMaker_getFrameScaleFactor(swigCPtr, this);
    }

    public void setFrameScaleFactor(float factor) {
        FaceEngineJNI.PhotoMaker_setFrameScaleFactor(swigCPtr, this, factor);
    }

    public boolean getStopAfterBestShot() {
        return FaceEngineJNI.PhotoMaker_getStopAfterBestShot(swigCPtr, this);
    }

    public void setStopAfterBestShot(boolean value) {
        FaceEngineJNI.PhotoMaker_setStopAfterBestShot(swigCPtr, this, value);
    }

    public float getBestShotScoreThreshold() {
        return FaceEngineJNI.PhotoMaker_getBestShotScoreThreshold(swigCPtr, this);
    }

    public void setBestShotScoreThreshold(float value) {
        FaceEngineJNI.PhotoMaker_setBestShotScoreThreshold(swigCPtr, this, value);
    }

    public float getRotationThresold() {
        return FaceEngineJNI.PhotoMaker_getRotationThreshold(swigCPtr, this);
    }

    public void setRotationThreshold(float value) {
        FaceEngineJNI.PhotoMaker_setRotationThreshold(swigCPtr, this, value);
    }

    public void setPortraitMaxHeight(int value) {
        FaceEngineJNI.PhotoMaker_setPortraitMaxHeight(swigCPtr, this, value);
    }

    public boolean isFrontalPose() {
        return FaceEngineJNI.PhotoMaker_isFrontalPose(swigCPtr, this);
    }

    public boolean primaryDetectionChanged() {
        return FaceEngineJNI.PhotoMaker_primaryDetectionChanged(swigCPtr, this);
    }

    public int getEyesState() {
        return FaceEngineJNI.PhotoMaker_getEyesState(swigCPtr, this);
    }

    public float matchDescriptors(byte[] descriptor1, byte[] descriptor2) {
        return FaceEngineJNI.PhotoMaker_matchDescriptors(swigCPtr, this, descriptor1, descriptor2);
    }

    public void calcFaceDescriptorFromBestFrame() {
        FaceEngineJNI.PhotoMaker_calcFaceDescriptorFromBestFrame(swigCPtr, this);
    }

    public byte[] getFaceDescriptorByteArray() {
        return FaceEngineJNI.PhotoMaker_getFaceDescriptorByteArray(swigCPtr, this);
    }

    public void disableOpenEyesCheck(boolean value) {
        FaceEngineJNI.PhotoMaker_disableOpenEyesCheck(swigCPtr, this, value);
    }
}
