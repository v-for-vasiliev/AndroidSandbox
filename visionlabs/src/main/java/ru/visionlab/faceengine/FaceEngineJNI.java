/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ru.visionlab.faceengine;

public final class FaceEngineJNI {

    public static native int[] getFaceBBOX(byte[] image, int width, int height);

    public static native void Point_x_set(long jarg1, Point jarg1_, int jarg2);

    public static native int Point_x_get(long jarg1, Point jarg1_);

    public static native void Point_y_set(long jarg1, Point jarg1_, int jarg2);

    public static native int Point_y_get(long jarg1, Point jarg1_);

    public static native long new_Point__SWIG_0();

    public static native long new_Point__SWIG_1(int jarg1, int jarg2);

    public static native void delete_Point(long jarg1);

    public static native void Rect_topLeft_set(long jarg1, Rect jarg1_, long jarg2, Point jarg2_);

    public static native long Rect_topLeft_get(long jarg1, Rect jarg1_);

    public static native void Rect_bottomRight_set(long jarg1, Rect jarg1_, long jarg2,
            Point jarg2_);

    public static native long Rect_bottomRight_get(long jarg1, Rect jarg1_);

    public static native long new_Rect__SWIG_0();

    public static native long new_Rect__SWIG_1(long jarg1, Point jarg1_, int jarg2, int jarg3);

    public static native long new_Rect__SWIG_2(long jarg1, Point jarg1_, long jarg2, Point jarg2_);

    public static native int Rect_getTop(long jarg1, Rect jarg1_);

    public static native int Rect_getLeft(long jarg1, Rect jarg1_);

    public static native int Rect_getRight(long jarg1, Rect jarg1_);

    public static native int Rect_getBottom(long jarg1, Rect jarg1_);

    public static native int Rect_getWidth(long jarg1, Rect jarg1_);

    public static native int Rect_getHeight(long jarg1, Rect jarg1_);

    public static native int Rect_getArea(long jarg1, Rect jarg1_);

    public static native boolean Rect_isValid(long jarg1, Rect jarg1_);

    public static native void delete_Rect(long jarg1);

    public static native int VERSION_MAJOR_get();

    public static native int VERSION_MINOR_get();

    public static native int VERSION_PATCH_get();

    public static native String VERSION_HASH_get();

    public static native void ImageView_pixels_set(long jarg1, ImageView jarg1_,
            java.nio.ByteBuffer jarg2);

    public static native java.nio.ByteBuffer ImageView_pixels_get(long jarg1, ImageView jarg1_);

    public static native void ImageView_width_set(long jarg1, ImageView jarg1_, int jarg2);

    public static native int ImageView_width_get(long jarg1, ImageView jarg1_);

    public static native void ImageView_height_set(long jarg1, ImageView jarg1_, int jarg2);

    public static native int ImageView_height_get(long jarg1, ImageView jarg1_);

    public static native void ImageView_format_set(long jarg1, ImageView jarg1_, int jarg2);

    public static native int ImageView_format_get(long jarg1, ImageView jarg1_);

    public static native long new_ImageView__SWIG_0();

    public static native long new_ImageView__SWIG_1(java.nio.ByteBuffer jarg1, int jarg2, int jarg3,
            int jarg4);

    public static native long new_ImageView__SWIG_2(java.nio.ByteBuffer jarg1, int jarg2,
            int jarg3);

    public static native boolean ImageView_isValid(long jarg1, ImageView jarg1_);

    public static native void ImageView_getRecPixels(long jarg1, ImageView jarg1_,
            java.nio.ByteBuffer jarg2);

    public static native long ImageView_getRect(long jarg1, ImageView jarg1_);

    public static native void ImageView_copyTo(long jarg1, ImageView jarg1_, long jarg2,
            ImageView jarg2_);

    public static native void delete_ImageView(long jarg1);

    public static native int getNumBytesPerPixel(int jarg1);

    public static native int getNumBytesPerImageRow(int jarg1, int jarg2);

    public static native int getNumBytesPerImageView(long jarg1, ImageView jarg1_);

    public static native long new_PhotoMaker(String jarg2);

    public static native void delete_PhotoMaker(long jarg1);

    public static native boolean PhotoMaker_isLoaded(long jarg1, PhotoMaker jarg1_);

    public static native boolean PhotoMaker_load(long jarg1, PhotoMaker jarg1_, String jarg2);

    public static native boolean initFaceEngine(String path);

    public static native void PhotoMaker_reset(long jarg1, PhotoMaker jarg1_);

    public static native boolean PhotoMaker_haveFaceDetection(long jarg1, PhotoMaker jarg1_);

    public static native long PhotoMaker_getFaceDetection(long jarg1, PhotoMaker jarg1_);

    public static native boolean[] PhotoMaker_getQualityStates(long jarg1, PhotoMaker jarg1_);

    public static native void PhotoMaker_update(long jarg1, PhotoMaker jarg1_);

    public static native void PhotoMaker_submit(long jarg1, PhotoMaker jarg1_, long jarg2,
            ImageView jarg2_);

    public static native long PhotoMaker_getBestShot(long jarg1, PhotoMaker jarg1_);

    public static native long PhotoMaker_getBestWarpedShot(long jarg1, PhotoMaker jarg1_);

    public static native boolean PhotoMaker_haveBestShot(long jarg1, PhotoMaker jarg1_);

    public static native long PhotoMaker_getBestFrame(long jarg1, PhotoMaker jarg1_);

    public static native void PhotoMaker_setSaveBestFrameEnabled(long jarg1, PhotoMaker jarg1_,
            boolean jarg2);

    public static native void PhotoMaker_disableOpenEyesCheck(long jarg1, PhotoMaker jarg1_,
            boolean jarg2);

    public static native int PhotoMaker_getCurrentFrameNumber(long jarg1, PhotoMaker jarg1_);

    public static native int PhotoMaker_getBestShotFrameNumber(long jarg1, PhotoMaker jarg1_);

    public static native int PhotoMaker_getLastFrameWithDetectionNumber(long jarg1,
            PhotoMaker jarg1_);

    public static native void PhotoMaker_setFrameScaleFactor(long jarg1, PhotoMaker jarg1_,
            float jarg2);

    public static native float PhotoMaker_getFrameScaleFactor(long jarg1, PhotoMaker jarg1_);

    public static native void PhotoMaker_setStopAfterBestShot(long jarg1, PhotoMaker jarg1_,
            boolean jarg2);

    public static native boolean PhotoMaker_getStopAfterBestShot(long jarg1, PhotoMaker jarg1_);

    public static native void PhotoMaker_setBestShotScoreThreshold(long jarg1, PhotoMaker jarg1_,
            float jarg2);

    public static native float PhotoMaker_getBestShotScoreThreshold(long jarg1, PhotoMaker jarg1_);

    public static native void PhotoMaker_setRotationThreshold(long jarg1, PhotoMaker jarg1_,
            float jarg2);

    public static native float PhotoMaker_getRotationThreshold(long jarg1, PhotoMaker jarg1_);

    public static native boolean PhotoMaker_isFrontalPose(long jarg1, PhotoMaker jarg1_);

    public static native boolean PhotoMaker_primaryDetectionChanged(long jarg1, PhotoMaker jarg1_);

    public static native int PhotoMaker_getEyesState(long jarg1, PhotoMaker jarg1_);

    public static native void PhotoMaker_setPortraitMaxHeight(long jarg1, PhotoMaker jarg1_,
            int jarg2);

    public static native float PhotoMaker_matchDescriptors(long jarg1, PhotoMaker jarg1_,
            byte[] descriptor1, byte[] descriptor2);

    public static native void PhotoMaker_calcFaceDescriptorFromBestFrame(long jarg1,
            PhotoMaker jarg1_);

    public static native byte[] PhotoMaker_getFaceDescriptorByteArray(long jarg1,
            PhotoMaker jarg1_);

    public static native void submitImage(byte[] image, int width, int height);

    public static native int checkCurrentStage();

    public static native void setZoomLiveness();

    public static native void setEyeLiveness();

    public static native void resetLiveness();

    public static native void startCheck();

    public static native int getLivenessAction();

}