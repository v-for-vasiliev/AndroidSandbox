/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// this is for generic code (to be used with desktop java)
#include <thread>

#ifndef SWIGJAVA
#define SWIGJAVA
#endif


#ifdef __cplusplus

/* SwigValueWrapper is described in swig.swg */
template<typename T>
class SwigValueWrapper {
    struct SwigMovePointer {
        T *ptr;

        SwigMovePointer(T *p) : ptr(p) { }

        ~SwigMovePointer() { delete ptr; }

        SwigMovePointer &operator=(SwigMovePointer &rhs) {
            T *oldptr = ptr;
            ptr = 0;
            delete oldptr;
            ptr = rhs.ptr;
            rhs.ptr = 0;
            return *this;
        }
    } pointer;

    SwigValueWrapper &operator=(const SwigValueWrapper<T> &rhs);

    SwigValueWrapper(const SwigValueWrapper<T> &rhs);

public:
    SwigValueWrapper() : pointer(0) { }

    SwigValueWrapper &operator=(const T &t) {
        SwigMovePointer tmp(new T(t));
        pointer = tmp;
        return *this;
    }

    operator T &() const { return *pointer.ptr; }

    T *operator&() { return pointer.ptr; }
};

template<typename T>
T SwigValueInit() {
    return T();
}

#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <cstring>
#include <vector>
#include <stdio.h>

/* Support for throwing Java exceptions */
typedef enum
{
    SWIG_JavaOutOfMemoryError = 1,
    SWIG_JavaIOException,
    SWIG_JavaRuntimeException,
    SWIG_JavaIndexOutOfBoundsException,
    SWIG_JavaArithmeticException,
    SWIG_JavaIllegalArgumentException,
    SWIG_JavaNullPointerException,
    SWIG_JavaDirectorPureVirtual,
    SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct
{
    SWIG_JavaExceptionCodes code;
    const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg)
{
    jclass excep;
    static const SWIG_JavaExceptions_t java_exceptions[] = {
            {SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError"},
            {SWIG_JavaIOException, "java/io/IOException"},
            {SWIG_JavaRuntimeException, "java/lang/RuntimeException"},
            {SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException"},
            {SWIG_JavaArithmeticException, "java/lang/ArithmeticException"},
            {SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException"},
            {SWIG_JavaNullPointerException, "java/lang/NullPointerException"},
            {SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException"},
            {SWIG_JavaUnknownError, "java/lang/UnknownError"},
            {(SWIG_JavaExceptionCodes) 0, "java/lang/UnknownError"}
    };
    const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

    while (except_ptr->code != code && except_ptr->code)
        except_ptr++;

    jenv->ExceptionClear();
    excep = jenv->FindClass(except_ptr->java_exception);
    if (excep)
        jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

//imageview --> fsdk image
#include <Def.hpp>
#include <PhotoMaker.hpp>

#ifdef WITH_FSDK
#include <FsdkRoutine.h>
#else

// logs in <FsdkRoutine.h>
#ifdef __ANDROID__
#include <android/log.h>

#define LOG_INFO(TAG, ...) __android_log_print(ANDROID_LOG_INFO, TAG, __VA_ARGS__);
#define LOG_WARN(TAG, ...) __android_log_print(ANDROID_LOG_WARNING, TAG, __VA_ARGS__);
#define LOG_FATAL(TAG, ...) __android_log_print(ANDROID_LOG_FATAL, TAG, __VA_ARGS__);

#else

#define LOG_INFO(TAG, ...) ;
#define LOG_WARN(TAG, ...) ;
#define LOG_FATAL(TAG, ...) ;

#endif

#endif // endif WITH_FSDK

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_Point_1x_1set(JNIEnv *jenv, jclass jcls,
                                                                                             jlong jarg1,
                                                                                             jobject jarg1_,
                                                                                             jint jarg2)
{
    fsdk::Point2i *arg1;
    int32_t arg2;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;

    arg1 = *(fsdk::Point2i **) &jarg1;
    arg2 = (int32_t) jarg2;
    if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_Point_1x_1get(JNIEnv *jenv, jclass jcls,
                                                                                             jlong jarg1,
                                                                                             jobject jarg1_)
{
    jint jresult = 0;
    fsdk::Point2i *arg1;
    int32_t result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Point2i **) &jarg1;
    result = (int32_t) ((arg1)->x);
    jresult = (jint) result;
    return jresult;
}


SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_Point_1y_1set(JNIEnv *jenv, jclass jcls,
                                                                                             jlong jarg1,
                                                                                             jobject jarg1_,
                                                                                             jint jarg2)
{
    fsdk::Point2i *arg1;
    int32_t arg2;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Point2i **) &jarg1;
    arg2 = (int32_t) jarg2;
    if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_Point_1y_1get(JNIEnv *jenv, jclass jcls,
                                                                                             jlong jarg1,
                                                                                             jobject jarg1_)
{
    jint jresult = 0;
    fsdk::Point2i *arg1;
    int32_t result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Point2i **) &jarg1;
    result = (int32_t) ((arg1)->y);
    jresult = (jint) result;
    return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_new_1Point_1_1SWIG_10(JNIEnv *jenv,
                                                                                                      jclass jcls)
{
    jlong jresult = 0;
    fsdk::Point2i *result = 0;

    (void) jenv;
    (void) jcls;
    result = new fsdk::Point2i();
    *(fsdk::Point2i **) &jresult = result;
    return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_new_1Point_1_1SWIG_11(JNIEnv *jenv,
                                                                                                      jclass jcls,
                                                                                                      jint jarg1,
                                                                                                      jint jarg2)
{
    jlong jresult = 0;
    int32_t arg1;
    int32_t arg2;
    fsdk::Point2i *result = 0;

    (void) jenv;
    (void) jcls;
    arg1 = (int32_t) jarg1;
    arg2 = (int32_t) jarg2;
    result = new fsdk::Point2i(arg1, arg2);
    *(fsdk::Point2i **) &jresult = result;
    return jresult;
}


SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_delete_1Point(JNIEnv *jenv, jclass jcls,
                                                                                             jlong jarg1)
{
    fsdk::Point2i *arg1;

    (void) jenv;
    (void) jcls;
    arg1 = *(fsdk::Point2i **) &jarg1;
    delete arg1;
}


SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_Rect_1topLeft_1set(JNIEnv *jenv,
                                                                                                  jclass jcls,
                                                                                                  jlong jarg1,
                                                                                                  jobject jarg1_,
                                                                                                  jlong jarg2,
                                                                                                  jobject jarg2_)
{
    fsdk::Rect *arg1;
    fsdk::Point2i *arg2;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    (void) jarg2_;
    arg1 = *(fsdk::Rect **) &jarg1;
    arg2 = *(fsdk::Point2i **) &jarg2;
    if(arg1) arg1->topLeft() = *arg2;

}


SWIGEXPORT jlong JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_Rect_1topLeft_1get(JNIEnv *jenv,
                                                                                                   jclass jcls,
                                                                                                   jlong jarg1,
                                                                                                   jobject jarg1_)
{
    jlong jresult = 0;
    fsdk::Rect *arg1;
    fsdk::Point2i *result = 0;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Rect **) &jarg1;
    fsdk::Point2i temp = arg1->topLeft();
    result = &temp;
    *(fsdk::Point2i **) &jresult = result;
    return jresult;
}


SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_Rect_1bottomRight_1set(JNIEnv *jenv,
                                                                                                      jclass jcls,
                                                                                                      jlong jarg1,
                                                                                                      jobject jarg1_,
                                                                                                      jlong jarg2,
                                                                                                      jobject jarg2_)
{
    fsdk::Rect *arg1;
    fsdk::Point2i *arg2;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    (void) jarg2_;
    arg1 = *(fsdk::Rect **) &jarg1;
    arg2 = *(fsdk::Point2i **) &jarg2;
    if(arg1) arg1->bottomRight() = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_Rect_1bottomRight_1get(JNIEnv *jenv,
                                                                                                       jclass jcls,
                                                                                                       jlong jarg1,
                                                                                                       jobject jarg1_)
{
    jlong jresult = 0;
    fsdk::Rect *arg1;
    fsdk::Point2i *result = 0;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Rect **) &jarg1;
    fsdk::Point2i temp = arg1->bottomRight();
    result = &temp;
    *(fsdk::Point2i **) &jresult = result;
    return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_new_1Rect_1_1SWIG_10(JNIEnv *jenv,
                                                                                                     jclass jcls)
{
    jlong jresult = 0;
    fsdk::Rect *result = 0;

    (void) jenv;
    (void) jcls;
    result = new fsdk::Rect();
    *(fsdk::Rect **) &jresult = result;
    return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_new_1Rect_1_1SWIG_11(JNIEnv *jenv,
                                                                                                     jclass jcls,
                                                                                                     jlong jarg1,
                                                                                                     jobject jarg1_,
                                                                                                     jint jarg2,
                                                                                                     jint jarg3)
{
    jlong jresult = 0;
    fsdk::Point2i *arg1 = 0;
    int32_t arg2;
    int32_t arg3;
    fsdk::Rect *result = 0;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Point2i **) &jarg1;
    if (!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "fsdk::Point2i const & reference is null");
        return 0;
    }
    arg2 = (int32_t) jarg2;
    arg3 = (int32_t) jarg3;
    result = new fsdk::Rect(arg1->x,arg1->y, arg2, arg3);
    *(fsdk::Rect **) &jresult = result;
    return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_new_1Rect_1_1SWIG_12(JNIEnv *jenv,
                                                                                                     jclass jcls,
                                                                                                     jlong jarg1,
                                                                                                     jobject jarg1_,
                                                                                                     jlong jarg2,
                                                                                                     jobject jarg2_)
{
    jlong jresult = 0;
    fsdk::Point2i *arg1 = 0;
    fsdk::Point2i *arg2 = 0;
    fsdk::Rect *result = 0;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    (void) jarg2_;
    arg1 = *(fsdk::Point2i **) &jarg1;
    if (!arg1) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "fsdk::Point2i const & reference is null");
        return 0;
    }
    arg2 = *(fsdk::Point2i **) &jarg2;
    if (!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "fsdk::Point2i const & reference is null");
        return 0;
    }
    result = new fsdk::Rect((fsdk::Point2i const &) *arg1, (fsdk::Point2i const &) *arg2);
    *(fsdk::Rect **) &jresult = result;
    return jresult;
}


SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_Rect_1getTop(JNIEnv *jenv, jclass jcls,
                                                                                            jlong jarg1,
                                                                                            jobject jarg1_)
{
    jint jresult = 0;
    fsdk::Rect *arg1;
    int32_t result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Rect **) &jarg1;
    result = (int32_t) ((fsdk::Rect const *) arg1)->top();
    jresult = (jint) result;
    return jresult;
}


SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_Rect_1getLeft(JNIEnv *jenv, jclass jcls,
                                                                                             jlong jarg1,
                                                                                             jobject jarg1_)
{
    jint jresult = 0;
    fsdk::Rect *arg1;
    int32_t result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Rect **) &jarg1;
    result = (int32_t) ((fsdk::Rect const *) arg1)->left();
    jresult = (jint) result;
    return jresult;
}


SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_Rect_1getRight(JNIEnv *jenv, jclass jcls,
                                                                                              jlong jarg1,
                                                                                              jobject jarg1_)
{
    jint jresult = 0;
    fsdk::Rect *arg1;
    int32_t result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Rect **) &jarg1;
    result = (int32_t) ((fsdk::Rect const *) arg1)->right();
    jresult = (jint) result;
    return jresult;
}


SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_Rect_1getBottom(JNIEnv *jenv,
                                                                                               jclass jcls,
                                                                                               jlong jarg1,
                                                                                               jobject jarg1_)
{
    jint jresult = 0;
    fsdk::Rect *arg1;
    int32_t result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Rect **) &jarg1;
    result = (int32_t) ((fsdk::Rect const *) arg1)->bottom();
    jresult = (jint) result;
    return jresult;
}


SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_Rect_1getWidth(JNIEnv *jenv, jclass jcls,
                                                                                              jlong jarg1,
                                                                                              jobject jarg1_)
{
    jint jresult = 0;
    fsdk::Rect *arg1;
    int32_t result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Rect **) &jarg1;
    result = (int32_t) ((fsdk::Rect const *) arg1)->width;
    jresult = (jint) result;
    return jresult;
}


SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_Rect_1getHeight(JNIEnv *jenv,
                                                                                               jclass jcls,
                                                                                               jlong jarg1,
                                                                                               jobject jarg1_)
{
    jint jresult = 0;
    fsdk::Rect *arg1;
    int32_t result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Rect **) &jarg1;
    result = (int32_t) ((fsdk::Rect const *) arg1)->height;
    jresult = (jint) result;
    return jresult;
}


SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_Rect_1getArea(JNIEnv *jenv, jclass jcls,
                                                                                             jlong jarg1,
                                                                                             jobject jarg1_)
{
    jint jresult = 0;
    fsdk::Rect *arg1;
    int32_t result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Rect **) &jarg1;
    result = (int32_t) ((fsdk::Rect const *) arg1)->getArea();
    jresult = (jint) result;
    return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_Rect_1isValid(JNIEnv *jenv,
                                                                                                 jclass jcls,
                                                                                                 jlong jarg1,
                                                                                                 jobject jarg1_)
{
    jboolean jresult = 0;
    fsdk::Rect *arg1;
    bool result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Rect **) &jarg1;
    result = (bool) ((fsdk::Rect const *) arg1)->isValid();
    jresult = (jboolean) result;
    return jresult;
}


SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_delete_1Rect(JNIEnv *jenv, jclass jcls,
                                                                                            jlong jarg1)
{
    fsdk::Rect *arg1;

    (void) jenv;
    (void) jcls;
    arg1 = *(fsdk::Rect **) &jarg1;
    delete arg1;
}


SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_VERSION_1MAJOR_1get(JNIEnv *jenv,
                                                                                                   jclass jcls)
{
    jint jresult = 0;
    vl::Version result;

    (void) jenv;
    (void) jcls;
    result = vl::VERSION_MAJOR;
    jresult = (jint) result;
    return jresult;
}


SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_VERSION_1MINOR_1get(JNIEnv *jenv,
                                                                                                   jclass jcls)
{
    jint jresult = 0;
    vl::Version result;

    (void) jenv;
    (void) jcls;
    result = vl::VERSION_MINOR;
    jresult = (jint) result;
    return jresult;
}


SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_VERSION_1PATCH_1get(JNIEnv *jenv,
                                                                                                   jclass jcls)
{
    jint jresult = 0;
    vl::Version result;

    (void) jenv;
    (void) jcls;
    result = vl::VERSION_PATCH;
    jresult = (jint) result;
    return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_VERSION_1HASH_1get(JNIEnv *jenv,
                                                                                                     jclass jcls)
{
    jstring jresult = 0;
    char *result = 0;

    (void) jenv;
    (void) jcls;
    result = (char *) vl::VERSION_HASH;
    if (result) jresult = jenv->NewStringUTF((const char *) result);
    return jresult;
}


/*SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_WrapperJNI_ImageView_1pixels_1set(JNIEnv *jenv,
                                                                                                      jclass jcls,
                                                                                                      jlong jarg1,
                                                                                                      jobject jarg1_,
                                                                                                      jobject jarg2)
{


    fsdk::Image *arg1;
    void *arg2;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Image **) &jarg1;
    {
        arg2 = jenv->GetDirectBufferAddress(jarg2);
        if (arg2 == NULL) {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
                                    "Unable to get address of a java.nio.ByteBuffer direct byte buffer. Buffer must be a direct buffer and not a non-direct buffer.");
        }
    }
    {
        if (arg2) {
           arg1->pixels = arg2;
            arg1->set
        } else {
            arg1->pixels = 0;
        }
    }

}*/


SWIGEXPORT jobject JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_ImageView_1pixels_1get(JNIEnv *jenv,
                                                                                                         jclass jcls,
                                                                                                         jlong jarg1,
                                                                                                         jobject jarg1_)
{

    jobject jresult = 0;
    fsdk::Image *arg1;
    void *result = 0;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Image **) &jarg1;
    result = (arg1)->getData();
    *(void **) &jresult = result;
    return jresult;
}


SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_ImageView_1width_1get(JNIEnv *jenv,
                                                                                                     jclass jcls,
                                                                                                     jlong jarg1,
                                                                                                     jobject jarg1_)
{

    jint jresult = 0;
    fsdk::Image *arg1;
    int32_t result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Image **) &jarg1;
    result = (int32_t) ((arg1)->getWidth());
    jresult = (jint) result;
    return jresult;
}


SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_ImageView_1height_1get(JNIEnv *jenv,
                                                                                                      jclass jcls,
                                                                                                      jlong jarg1,
                                                                                                      jobject jarg1_)
{
    jint jresult = 0;
    fsdk::Image *arg1;
    int32_t result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Image **) &jarg1;
    result = (int32_t) ((arg1)->getHeight());
    jresult = (jint) result;
    return jresult;
}


SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_ImageView_1format_1get(JNIEnv *jenv,
                                                                                                      jclass jcls,
                                                                                                      jlong jarg1,
                                                                                                      jobject jarg1_)
{
    jint jresult = 0;
    fsdk::Image *arg1;
    int32_t result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Image **) &jarg1;
    result = (int32_t) ((arg1)->getFormat());
    jresult = (jint) result;
    return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_new_1ImageView_1_1SWIG_10(JNIEnv *jenv,
                                                                                                          jclass jcls)
{
    jlong jresult = 0;
    fsdk::Image *result = 0;

    (void) jenv;
    (void) jcls;
    result = new fsdk::Image();
    *(fsdk::Image **) &jresult = result;
    return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_new_1ImageView_1_1SWIG_11(JNIEnv *jenv,
                                                                                                          jclass jcls,
                                                                                                          jobject jarg1,
                                                                                                          jint jarg2,
                                                                                                          jint jarg3,
                                                                                                          jint jarg4)
{
    jlong jresult = 0;
    void *arg1;
    int32_t arg2;
    int32_t arg3;
    int32_t arg4;
    fsdk::Image *result = 0;

    (void) jenv;
    (void) jcls;
    {
        arg1 = jenv->GetDirectBufferAddress(jarg1);
        if (arg1 == NULL) {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
                                    "Unable to get address of a java.nio.ByteBuffer direct byte buffer. Buffer must be a direct buffer and not a non-direct buffer.");
        }
    }
    arg2 = (int32_t) jarg2;
    arg3 = (int32_t) jarg3;
    arg4 = (int32_t) jarg4;
    fsdk::Format::Type type = static_cast<fsdk::Format::Type>(arg4);
    result = new fsdk::Image(arg2, arg3,type ,arg1);
    *(fsdk::Image **) &jresult = result;

    return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_new_1ImageView_1_1SWIG_12(JNIEnv *jenv,
                                                                                                          jclass jcls,
                                                                                                          jobject jarg1,
                                                                                                          jint jarg2,
                                                                                                          jint jarg3)
{
    jlong jresult = 0;
    void *arg1;
    int32_t arg2;
    int32_t arg3;
    fsdk::Image *result = 0;

    (void) jenv;
    (void) jcls;
    {
        arg1 = jenv->GetDirectBufferAddress(jarg1);
        if (arg1 == NULL) {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
                                    "Unable to get address of a java.nio.ByteBuffer direct byte buffer. Buffer must be a direct buffer and not a non-direct buffer.");
        }
    }
    arg2 = (int32_t) jarg2;
    arg3 = (int32_t) jarg3;
    result = new fsdk::Image(arg2, arg3,fsdk::Format::Type::R8G8B8X8,arg1);//might be some trouble

    *(fsdk::Image **) &jresult = result;

    return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_ImageView_1isValid(JNIEnv *jenv,
                                                                                                      jclass jcls,
                                                                                                      jlong jarg1,
                                                                                                      jobject jarg1_)
{
    jboolean jresult = 0;
    fsdk::Image *arg1;
    bool result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Image **) &jarg1;
    result = (bool) ((fsdk::Image const *) arg1)->isValid();
    jresult = (jboolean) result;
    return jresult;
}


SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_ImageView_1getRecPixels(JNIEnv *jenv,
                                                                                                       jclass jcls,
                                                                                                       jlong jarg1,
                                                                                                       jobject jarg1_,
                                                                                                       jobject jarg2)
{

    fsdk::Image *arg1;
    void *arg2;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Image **) &jarg1;
    {
        arg2 = jenv->GetDirectBufferAddress(jarg2);
        if (arg2 == NULL) {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
                                    "Unable to get address of a java.nio.ByteBuffer direct byte buffer. Buffer must be a direct buffer and not a non-direct buffer.");
        }
    }
    unsigned char *result = (unsigned char *) arg2;
    jlong size = (jlong) jenv->GetDirectBufferCapacity(jarg2);
    memcpy(result, ((fsdk::Image const *) arg1)->getData(), size);

}


SWIGEXPORT jlong JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_ImageView_1getRect(JNIEnv *jenv,
                                                                                                   jclass jcls,
                                                                                                   jlong jarg1,
                                                                                                   jobject jarg1_)
{
    jlong jresult = 0;
    fsdk::Image *arg1;
    fsdk::Rect result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(fsdk::Image **) &jarg1;
    result = ((fsdk::Image const *) arg1)->getRect();
    *(fsdk::Rect **) &jresult = new fsdk::Rect((const fsdk::Rect &) result);
    return jresult;
}


SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_ImageView_1copyTo(JNIEnv *jenv,
                                                                                                 jclass jcls,
                                                                                                 jlong jarg1,
                                                                                                 jobject jarg1_,
                                                                                                 jlong jarg2,
                                                                                                 jobject jarg2_)
{
    fsdk::Image *arg1;
    fsdk::Image *arg2 = 0;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    (void) jarg2_;
    arg1 = *(fsdk::Image **) &jarg1;
    arg2 = *(fsdk::Image **) &jarg2;
    if (!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "fsdk::Image & reference is null");
        return;
    }
    arg2 = arg1;
}


SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_delete_1ImageView(JNIEnv *jenv,
                                                                                                 jclass jcls,
                                                                                                 jlong jarg1)
{
    fsdk::Image *arg1;

    (void) jenv;
    (void) jcls;
    arg1 = *(fsdk::Image **) &jarg1;
    delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_new_1PhotoMaker(JNIEnv *jenv,
                                                                                                jclass jcls,
                                                                                                jstring jarg2)
{
    jlong jresult = 0;
    vl::PhotoMaker *result = 0;
    char *arg2;
    arg2 = 0;

    if (jarg2) {
        arg2 = (char *) jenv->GetStringUTFChars(jarg2, 0);
        if (!arg2) return 0;
    }

    (void) jenv;
    (void) jcls;
    result = new vl::PhotoMaker(g_engine);
    //result->load("");
    *(vl::PhotoMaker **) &jresult = result;
    return jresult;
}


SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_delete_1PhotoMaker(JNIEnv *jenv,
                                                                                                  jclass jcls,
                                                                                                  jlong jarg1)
{
    vl::PhotoMaker *arg1;

    (void) jenv;
    (void) jcls;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1isLoaded(JNIEnv *jenv,
                                                                                                        jclass jcls,
                                                                                                        jlong jarg1,
                                                                                                        jobject jarg1_)
{
    jboolean jresult = 0;
    vl::PhotoMaker *arg1;
    bool result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    result = (bool) ((vl::PhotoMaker const *) arg1)->isLoaded();
    jresult = (jboolean) result;
    return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1load(JNIEnv *jenv,
                                                                                                    jclass jcls,
                                                                                                    jlong jarg1,
                                                                                                    jobject jarg1_,
                                                                                                    jstring jarg2)
{
    jboolean jresult = 0;
    vl::PhotoMaker *arg1;
    char *arg2;
    bool result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    arg2 = 0;
    if (jarg2) {
        arg2 = (char *) jenv->GetStringUTFChars(jarg2, 0);
        if (!arg2) return 0;
    }
    result = (bool) (arg1)->load((char const *) arg2);
    jresult = (jboolean) result;
    if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *) arg2);
    return jresult;
}

SWIGEXPORT jboolean JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_initFaceEngine(JNIEnv *jenv,
                                                                                                  jclass jcls,
                                                                                                  jstring path
)
{
    const char *nativeString = (char *) jenv->GetStringUTFChars(path, 0);
    jboolean jresult;
    bool result = initFaceEngine(nativeString);
    jresult = (jboolean) result;
    return jresult;
}

SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1reset(JNIEnv *jenv,
                                                                                                 jclass jcls,
                                                                                                 jlong jarg1,
                                                                                                 jobject jarg1_)
{
    vl::PhotoMaker *arg1;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    (arg1)->reset();
}


SWIGEXPORT jboolean JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1haveFaceDetection(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_)
{
    jboolean jresult = 0;
    vl::PhotoMaker *arg1;
    bool result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    result = (bool) ((vl::PhotoMaker const *) arg1)->haveFaceDetection();
    jresult = (jboolean) result;
    return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1getFaceDetection(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_)
{
    LOG_INFO("[face detection]", "IN face DETECTION!!!!");
    jlong jresult = 0;
    vl::PhotoMaker *arg1;
    fsdk::Rect result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    result = ((vl::PhotoMaker const *) arg1)->getFaceDetection();
    LOG_INFO("[face detection]","Detection rect coord x %d y %d Wdith %d Height %d",result.x,result.y,result.width,result.height);
    *(fsdk::Rect **) &jresult = new fsdk::Rect((const fsdk::Rect &) result);
    return jresult;
}

#ifdef WITH_DEBUG_INFO
SWIGEXPORT jfloatArray JNICALL Java_ru_visionlab_faceengine_WrapperJNI_PhotoMaker_1getScores(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_) {
    jlong jresult = 0;
    vl::PhotoMaker *arg1;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    float *arr = ((vl::PhotoMaker *) arg1)->getScores();

    jfloatArray result;
    result = jenv->NewFloatArray(6);
    if (result == NULL) {

        return NULL;
    }

    jenv->SetFloatArrayRegion(result, 0, 6, arr);

    return result;
}
#endif // WITH_DEBUG_INFO

SWIGEXPORT jbooleanArray JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1getQualityStates(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_)
{
    jlong jresult = 0;
    vl::PhotoMaker *arg1;
    LOG_INFO("[Quality]", "IN getQualityStates\n");
    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    fsdk::Quality qualityEstimation = (arg1)->getQualityEstimation();
    LOG_INFO("[Quality]", "Quiality is %f\n",qualityEstimation.getQuality());
    unsigned char qualStates[4];

    for (int i = 0; i < 4; ++i)
    {
        qualStates[i] = 1;
    }

    if(qualityEstimation.dark == 1) {
        qualStates[0] = 0;
    }

    if(qualityEstimation.light == 1) {
        qualStates[1] = 0;
    }

    if(qualityEstimation.gray  == 1) {
        qualStates[2] = 0;
    }

    if(qualityEstimation.blur == 1) {
        qualStates[3] = 0;
    }

    jbooleanArray result = jenv->NewBooleanArray(4);
    if (result == NULL) {
        return NULL;
    }

    jenv->SetBooleanArrayRegion(result, 0, 4, qualStates);

    return result;
}


SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1update(JNIEnv *jenv,
                                                                                                  jclass jcls,
                                                                                                  jlong jarg1,
                                                                                                  jobject jarg1_)
{
    vl::PhotoMaker *arg1;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    (arg1)->update();

}


SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1submit(JNIEnv *jenv,
                                                                                                  jclass jcls,
                                                                                                  jlong jarg1,
                                                                                                  jobject jarg1_,
                                                                                                  jlong jarg2,
                                                                                                  jobject jarg2_)
{
    vl::PhotoMaker *arg1;
    fsdk::Image *arg2 = 0;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    (void) jarg2_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    arg2 = *(fsdk::Image **) &jarg2;
    if (!arg2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "fsdk::Image const & reference is null");
        return;
    }
    const fsdk::Image Img = *arg2;
    (arg1)->submit((const fsdk::Image &)Img);
}


SWIGEXPORT jlong JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1getBestShot(JNIEnv *jenv,
                                                                                                        jclass jcls,
                                                                                                        jlong jarg1,
                                                                                                        jobject jarg1_)
{
    jlong jresult = 0;
    vl::PhotoMaker *arg1;
    fsdk::Image result;
    (void) jenv;
    (void) jcls;
    (void) jarg1_;

    arg1 = *(vl::PhotoMaker **) &jarg1;
    result = ((vl::PhotoMaker const *) arg1)->getBestShot();
    *(fsdk::Image **) &jresult = new fsdk::Image((const fsdk::Image &) result);
    return jresult;
}

SWIGEXPORT jlong JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1getBestWarpedShot(JNIEnv *jenv,
                                                                                                              jclass jcls,
                                                                                                              jlong jarg1,
                                                                                                              jobject jarg1_)
{
    jlong jresult = 0;
    vl::PhotoMaker *arg1;
    fsdk::Image result;
    (void) jenv;
    (void) jcls;
    (void) jarg1_;

    arg1 = *(vl::PhotoMaker **) &jarg1;
    result = ((vl::PhotoMaker const *) arg1)->getBestWarpedShot();
    *(fsdk::Image **) &jresult = new fsdk::Image((const fsdk::Image &) result);
    return jresult;
}

SWIGEXPORT jboolean JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1haveBestShot(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_)
{
    jboolean jresult = 0;
    vl::PhotoMaker *arg1;
    bool result;
    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    result = (bool) ((vl::PhotoMaker const *) arg1)->haveBestShot();
    jresult = (jboolean) result;

    return jresult;
}

SWIGEXPORT jlong JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1getBestFrame(JNIEnv *jenv,
                                                                                                         jclass jcls,
                                                                                                         jlong jarg1,
                                                                                                         jobject jarg1_)
{
    jlong jresult = 0;
    vl::PhotoMaker *arg1;
    fsdk::Image result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;

    arg1 = *(vl::PhotoMaker **) &jarg1;
    result = ((vl::PhotoMaker const *) arg1)->getBestFrame();
    *(fsdk::Image **) &jresult = new fsdk::Image((const fsdk::Image &) result);

    return jresult;
}

SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1setSaveBestFrameEnabled(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_,
        jboolean jarg2)
{
    vl::PhotoMaker *arg1;
    bool arg2;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    arg2 = jarg2 ? true : false;
    (arg1)->setSaveBestFrameEnabled(arg2);
}

SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1disableOpenEyesCheck(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_,
        jboolean jarg2)
{
    vl::PhotoMaker *arg1;
    bool arg2;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    arg2 = jarg2 ? true : false;
    (arg1)->disableOpenEyesCheck(arg2);
}

SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1getCurrentFrameNumber(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_)
{
    jint jresult = 0;
    vl::PhotoMaker *arg1;
    int32_t result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    result = (int32_t) ((vl::PhotoMaker const *) arg1)->getCurrentFrameNumber();
    jresult = (jint) result;
    return jresult;
}


SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1getBestShotFrameNumber(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_)
{
    jint jresult = 0;
    vl::PhotoMaker *arg1;
    int32_t result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    result = (int32_t) ((vl::PhotoMaker const *) arg1)->getBestShotFrameNumber();
    jresult = (jint) result;
    return jresult;
}


SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1getLastFrameWithDetectionNumber(
        JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_)
{
    jint jresult = 0;
    vl::PhotoMaker *arg1;
    int32_t result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    result = (int32_t) ((vl::PhotoMaker const *) arg1)->getLastFrameWithDetectionNumber();
    jresult = (jint) result;
    return jresult;
}


SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1setFrameScaleFactor(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_,
        jfloat jarg2)
{
    vl::PhotoMaker *arg1;
    float arg2;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    arg2 = (float) jarg2;
    (arg1)->setFrameScaleFactor(arg2);
}


SWIGEXPORT jfloat JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1getFrameScaleFactor(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_)
{
    jfloat jresult = 0;
    vl::PhotoMaker *arg1;
    float result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    result = ((vl::PhotoMaker const *) arg1)->getFrameScaleFactor();
    jresult = (jfloat) result;
    return jresult;
}

SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1setStopAfterBestShot(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_,
        jboolean jarg2)
{
    vl::PhotoMaker *arg1;
    bool arg2;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    arg2 = jarg2 ? true : false;
    (arg1)->setStopAfterBestShot(arg2);
}


SWIGEXPORT jboolean JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1getStopAfterBestShot(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_)
{
    jboolean jresult = 0;
    vl::PhotoMaker *arg1;
    bool result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    result = (bool) ((vl::PhotoMaker const *) arg1)->getStopAfterBestShot();
    jresult = (jboolean) result;
    return jresult;
}


SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1setBestShotScoreThreshold(
        JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2)
{
    vl::PhotoMaker *arg1;
    float arg2;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    arg2 = (float) jarg2;
    (arg1)->setBestShotScoreThreshold(arg2);
}


SWIGEXPORT jfloat JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1getBestShotScoreThreshold(
        JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_)
{
    jfloat jresult = 0;
    vl::PhotoMaker *arg1;
    float result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    result = ((vl::PhotoMaker const *) arg1)->getBestShotScoreThreshold();
    jresult = (jfloat) result;
    return jresult;
}


SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1setRotationThreshold(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_,
        jfloat jarg2)
{
    vl::PhotoMaker *arg1;
    float arg2;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    arg2 = (float) jarg2;
    (arg1)->setRotationThreshold(arg2);
}

SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1setPortraitMaxHeight(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_,
        jint jarg2)
{
    vl::PhotoMaker *arg1;
    float arg2;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    arg2 = (int) jarg2;
    (arg1)->setPortraitMaxHeight(arg2);
}

SWIGEXPORT jfloat JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1getRotationThreshold(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_)
{
    jfloat jresult = 0;
    vl::PhotoMaker *arg1;
    float result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    result = ((vl::PhotoMaker const *) arg1)->getRotationThreshold();
    jresult = (jfloat) result;
    return jresult;
}

SWIGEXPORT jboolean JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1isFrontalPose(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_)
{
    LOG_INFO("[FRONTAL POSE]","PhotoMaker_1isFrontalPose\n");
    jboolean jresult = 0;
    vl::PhotoMaker *arg1;
    bool result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    result = (bool) ((vl::PhotoMaker const *) arg1)->isFrontalPose();
    LOG_INFO("[FRONTAL POSE]","PhotoMaker_1isFrontalPose = %d\n",result);
    jresult = (jboolean) result;
    return jresult;
}

SWIGEXPORT jfloat JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1matchDescriptors(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_,
        jbyteArray descriptorArray1,
        jbyteArray descriptorArray2)
{

    jbyte* descriptorBufferPtr1 = jenv->GetByteArrayElements(descriptorArray1, NULL);
    jsize lengthOfArray1 = jenv->GetArrayLength(descriptorArray1);

    jbyte* descriptorBufferPtr2 = jenv->GetByteArrayElements(descriptorArray2, NULL);
    jsize lengthOfArray2 = jenv->GetArrayLength(descriptorArray2);

    // copy to std vector
    std::vector<uint8_t> descriptorData1, descriptorData2;

    descriptorData1.assign(descriptorBufferPtr1, descriptorBufferPtr1 + lengthOfArray1);
    descriptorData2.assign(descriptorBufferPtr2, descriptorBufferPtr2 + lengthOfArray2);

    jenv->ReleaseByteArrayElements(descriptorArray1, descriptorBufferPtr1, 0);
    jenv->ReleaseByteArrayElements(descriptorArray2, descriptorBufferPtr2, 0);

#ifdef WITH_FSDK
    double similarity = matchDescriptorsArrays(descriptorData1, descriptorData2);
#else
    double similarity = 0.0;
#endif

    LOG_INFO("[MATCHER]",
             "Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1   matchDescriptors: %f \n", similarity);

    return similarity;
}

// 2 funcs for descriptor mathcing

std::vector<uint8_t> descriptor;

// 1. calc descriptor
SWIGEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1calcFaceDescriptorFromBestFrame(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_)
{
    jfloat jresult = 0;
    vl::PhotoMaker *arg1;
    float result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;

    arg1 = *(vl::PhotoMaker **) &jarg1;

#ifdef WITH_FSDK
    descriptor = getFaceDescriptorByteArrayFromImageView(((vl::PhotoMaker const *) arg1)->getBestWarpedShot());
#endif
}

// 1.a get descriptor array
SWIGEXPORT jbyteArray JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1getFaceDescriptorByteArray(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_)
{

    (void) jenv;
    (void) jcls;
    (void) jarg1_;

    jbyteArray result;
    result = jenv->NewByteArray(descriptor.size());
    if (result == NULL) {
        return NULL; /* out of memory error thrown */
    }

    // move from the temp structure to the java structure
    jenv->SetByteArrayRegion(result, 0, descriptor.size(), reinterpret_cast<signed char*>(descriptor.data()));

    return result;
}

JNIEXPORT jintArray JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_getFaceBBOX(
        JNIEnv *jenv,
        jclass jcls,
        jbyteArray data,
        jint width,
        jint height)
{
    //output rect
    jintArray result;
    result = jenv->NewIntArray(4);
    if (result == NULL) {
        return NULL; /* out of memory error thrown */
    }

    //convert java buff to fsdk::Image
    std::vector<uint8_t> buff;
    buff.resize(jenv->GetArrayLength(data));

    jenv->GetByteArrayRegion(data, 0, buff.size(), reinterpret_cast<jbyte*>(buff.data()));

    fsdk::Image image(width, height, fsdk::Format::R8G8B8X8, buff.data());
    submitImage(buff.data(), width, height);

    if(!image.isValid()){
        LOG_FATAL("BBOX","Converted image is null!\n");
        return result;
    }

    fsdk::Detection bbox = getFaceBbox(image);

    int bboxBuff[4] = {bbox.rect.x, bbox.rect.y, bbox.rect.width, bbox.rect.height};

    // move from the temp structure to the java structure
    jenv->SetIntArrayRegion(result, 0, 4, bboxBuff);

    return result;
}

#ifdef WITH_LIVENESS

SWIGEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1getEyesState(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_)
{
    jint jresult = 0;
    vl::PhotoMaker *arg1;
    int result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    fsdk::EyesEstimation EyesEst = arg1->getEyesEstimation();
    fsdk::EyesEstimation::EyeAttributes Leye = EyesEst.leftEye;
    jresult = (jint) Leye.state;
    return jresult;
}

std::vector<unsigned char> tmpBuf;

JNIEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_submitImage(
        JNIEnv *jenv,
        jclass jcls,
        jbyteArray data,
        jint width,
        jint height)
{
    tmpBuf.resize(jenv->GetArrayLength(data));
    jenv->GetByteArrayRegion(data, 0, tmpBuf.size(), reinterpret_cast<jbyte*>(tmpBuf.data()));

    submitImage(tmpBuf.data(), width, height);
}

JNIEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_startCheck(JNIEnv *jenv,
                                                                                         jclass jcls)
{
    startLivenessCheck();
}

JNIEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_getLivenessAction(JNIEnv *jenv,
                                                                                                jclass jcls)
{
    return getLivenessAction();
}

JNIEXPORT jint JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_checkCurrentStage(JNIEnv *jenv,
                                                                                                jclass jcls)
{
    return checkLivenessCurrentStage();
}

JNIEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_setZoomLiveness(JNIEnv *jenv,
                                                                                              jclass jcls)
{
    setZoomLiveness();
}

JNIEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_setEyeLiveness(JNIEnv *jenv,
                                                                                             jclass jcls)
{
    setEyeLiveness();
}

JNIEXPORT void JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_resetLiveness(JNIEnv *jenv,
                                                                                            jclass jcls)
{
    resetLiveness();
}

#endif // WITH_LIVENESS

SWIGEXPORT jboolean JNICALL Java_ru_visionlab_faceengine_FaceEngineJNI_PhotoMaker_1primaryDetectionChanged(
        JNIEnv *jenv,
        jclass jcls,
        jlong jarg1,
        jobject jarg1_)
{
    LOG_INFO("[FRONTAL POSE]","FaceEngineJNI_primaryDetectionChanged\n");
    jboolean jresult = 0;
    vl::PhotoMaker *arg1;
    bool result;

    (void) jenv;
    (void) jcls;
    (void) jarg1_;
    arg1 = *(vl::PhotoMaker **) &jarg1;
    result = (bool) ((vl::PhotoMaker const *) arg1)->primaryDetectionChanged();
    LOG_INFO("[FRONTAL POSE]","FaceEngineJNI_primaryDetectionChanged = %d\n",result);
    jresult = (jboolean) result;
    return jresult;
}

#ifdef __cplusplus
}
#endif

